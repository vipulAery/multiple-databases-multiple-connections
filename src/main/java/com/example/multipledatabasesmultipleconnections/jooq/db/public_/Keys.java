/*
 * This file is generated by jOOQ.
 */
package com.example.multipledatabasesmultipleconnections.jooq.db.public_;


import com.example.multipledatabasesmultipleconnections.jooq.db.public_.tables.Author;
import com.example.multipledatabasesmultipleconnections.jooq.db.public_.tables.Book;
import com.example.multipledatabasesmultipleconnections.jooq.db.public_.tables.BookStore;
import com.example.multipledatabasesmultipleconnections.jooq.db.public_.tables.BookToBookStore;
import com.example.multipledatabasesmultipleconnections.jooq.db.public_.tables.records.AuthorRecord;
import com.example.multipledatabasesmultipleconnections.jooq.db.public_.tables.records.BookRecord;
import com.example.multipledatabasesmultipleconnections.jooq.db.public_.tables.records.BookStoreRecord;
import com.example.multipledatabasesmultipleconnections.jooq.db.public_.tables.records.BookToBookStoreRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> PK_T_AUTHOR = UniqueKeys0.PK_T_AUTHOR;
    public static final UniqueKey<BookRecord> PK_T_BOOK = UniqueKeys0.PK_T_BOOK;
    public static final UniqueKey<BookStoreRecord> UK_T_BOOK_STORE_NAME = UniqueKeys0.UK_T_BOOK_STORE_NAME;
    public static final UniqueKey<BookToBookStoreRecord> PK_B2BS = UniqueKeys0.PK_B2BS;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BookRecord, AuthorRecord> BOOK__FK_T_BOOK_AUTHOR_ID = ForeignKeys0.BOOK__FK_T_BOOK_AUTHOR_ID;
    public static final ForeignKey<BookRecord, AuthorRecord> BOOK__FK_T_BOOK_CO_AUTHOR_ID = ForeignKeys0.BOOK__FK_T_BOOK_CO_AUTHOR_ID;
    public static final ForeignKey<BookToBookStoreRecord, BookStoreRecord> BOOK_TO_BOOK_STORE__FK_B2BS_BS_NAME = ForeignKeys0.BOOK_TO_BOOK_STORE__FK_B2BS_BS_NAME;
    public static final ForeignKey<BookToBookStoreRecord, BookRecord> BOOK_TO_BOOK_STORE__FK_B2BS_B_ID = ForeignKeys0.BOOK_TO_BOOK_STORE__FK_B2BS_B_ID;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 {
        public static final UniqueKey<AuthorRecord> PK_T_AUTHOR = Internal.createUniqueKey(Author.AUTHOR, "pk_t_author", Author.AUTHOR.ID);
        public static final UniqueKey<BookRecord> PK_T_BOOK = Internal.createUniqueKey(Book.BOOK, "pk_t_book", Book.BOOK.ID);
        public static final UniqueKey<BookStoreRecord> UK_T_BOOK_STORE_NAME = Internal.createUniqueKey(BookStore.BOOK_STORE, "uk_t_book_store_name", BookStore.BOOK_STORE.NAME);
        public static final UniqueKey<BookToBookStoreRecord> PK_B2BS = Internal.createUniqueKey(BookToBookStore.BOOK_TO_BOOK_STORE, "pk_b2bs", BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_STORE_NAME, BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<BookRecord, AuthorRecord> BOOK__FK_T_BOOK_AUTHOR_ID = Internal.createForeignKey(com.example.multipledatabasesmultipleconnections.jooq.db.public_.Keys.PK_T_AUTHOR, Book.BOOK, "book__fk_t_book_author_id", Book.BOOK.AUTHOR_ID);
        public static final ForeignKey<BookRecord, AuthorRecord> BOOK__FK_T_BOOK_CO_AUTHOR_ID = Internal.createForeignKey(com.example.multipledatabasesmultipleconnections.jooq.db.public_.Keys.PK_T_AUTHOR, Book.BOOK, "book__fk_t_book_co_author_id", Book.BOOK.CO_AUTHOR_ID);
        public static final ForeignKey<BookToBookStoreRecord, BookStoreRecord> BOOK_TO_BOOK_STORE__FK_B2BS_BS_NAME = Internal.createForeignKey(com.example.multipledatabasesmultipleconnections.jooq.db.public_.Keys.UK_T_BOOK_STORE_NAME, BookToBookStore.BOOK_TO_BOOK_STORE, "book_to_book_store__fk_b2bs_bs_name", BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_STORE_NAME);
        public static final ForeignKey<BookToBookStoreRecord, BookRecord> BOOK_TO_BOOK_STORE__FK_B2BS_B_ID = Internal.createForeignKey(com.example.multipledatabasesmultipleconnections.jooq.db.public_.Keys.PK_T_BOOK, BookToBookStore.BOOK_TO_BOOK_STORE, "book_to_book_store__fk_b2bs_b_id", BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_ID);
    }
}
