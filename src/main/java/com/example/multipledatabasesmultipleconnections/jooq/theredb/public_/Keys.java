/*
 * This file is generated by jOOQ.
 */
package com.example.multipledatabasesmultipleconnections.jooq.theredb.public_;


import com.example.multipledatabasesmultipleconnections.jooq.theredb.public_.tables.Hello;
import com.example.multipledatabasesmultipleconnections.jooq.theredb.public_.tables.records.HelloRecord;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<HelloRecord, Integer> IDENTITY_HELLO = Identities0.IDENTITY_HELLO;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<HelloRecord> HELLO_PKEY = UniqueKeys0.HELLO_PKEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<HelloRecord, Integer> IDENTITY_HELLO = Internal.createIdentity(Hello.HELLO, Hello.HELLO.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<HelloRecord> HELLO_PKEY = Internal.createUniqueKey(Hello.HELLO, "hello_pkey", Hello.HELLO.ID);
    }
}
